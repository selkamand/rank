[{"path":"https://selkamand.github.io/rank/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rank authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://selkamand.github.io/rank/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam El-Kamand. Author, maintainer, copyright holder.","code":""},{"path":"https://selkamand.github.io/rank/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"El-Kamand S (2024). rank: Flexible Customizable Ranking Functions. R package version 0.0.0.9000,  https://selkamand.github.io/rank/, https://github.com/selkamand/rank.","code":"@Manual{,   title = {rank: Flexible and Customizable Ranking Functions},   author = {Sam El-Kamand},   year = {2024},   note = {R package version 0.0.0.9000,  https://selkamand.github.io/rank/},   url = {https://github.com/selkamand/rank}, }"},{"path":"https://selkamand.github.io/rank/index.html","id":"rank","dir":"","previous_headings":"","what":"Flexible and Customizable Ranking Functions","title":"Flexible and Customizable Ranking Functions","text":"Rank provides customizable alternative built-rank() function. package offers following features: Frequency-based ranking categorical variables: choose whether rank based alphabetic order element frequency. Control sorting order: Use desc=TRUE rank based descending ascending order.","code":""},{"path":"https://selkamand.github.io/rank/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexible and Customizable Ranking Functions","text":"can install development version rank like :","code":"# install.packages('remotes') remotes::install_github(\"selkamand/rank\")"},{"path":"https://selkamand.github.io/rank/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Flexible and Customizable Ranking Functions","text":"","code":"library(rank)  fruits <- c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\")  ## CATEGORICAL INPUT -----------------------  # rank alphabetically smartrank(fruits) #> [1] 1.5 3.5 1.5 5.0 3.5  # rank based on frequency smartrank(fruits, sort_by = \"frequency\") #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 2 3 2 1 3  # rank based on descending order of frequency smartrank(fruits,sort_by = \"frequency\", desc = TRUE) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 1 2 1 3 2   ## NUMERICAL INPUT -----------------------  # rank numerically smartrank(c(1, 3, 2)) #> [1] 1 3 2  # rank numerically based on descending order smartrank(c(1, 3, 2), desc = TRUE) #> [1] 3 1 2  # always rank numerically, irrespective of sort_by smartrank(c(1, 3, 2), sort_by = \"frequency\") #> smartrank: Sorting a numeric variable. Ignoring `sort_by` and sorting numerically #> [1] 1 3 2"},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank a vector based on either alphabetical or frequency order — smartrank","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"function acts drop-replacement base rank() function added option : Rank categorical factors based frequency instead alphabetically Rank descending ascending order","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"","code":"smartrank(   x,   sort_by = c(\"alphabetical\", \"frequency\"),   desc = FALSE,   ties.method = \"average\",   na.last = TRUE,   verbose = TRUE )"},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"x numeric, character, factor vector sort_by Sort ranking either \"alphabetical\" \"frequency\" . Default \"alphabetical\" desc logical indicating whether ranking descending ( TRUE ) ascending ( FALSE ) order. input numeric, ranking always based numeric order. ties.method character string specifying ties treated,     see ‘Details’; can abbreviated. na.last logical character string controlling treatment     NAs. TRUE, missing values data     put last; FALSE, put first; NA,     removed; \"keep\" kept rank NA. verbose verbose (flag)","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"ranked vector","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"sort_by = \"frequency\", ties based frequency broken alphabetical order terms sort_by = \"frequency\" input character, ties.method ignored. distinct element level gets rank, rank 1 unit away next element, irrespective many duplicates","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"","code":"## CATEGORICAL INPUT ----------------------- fruits <- c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\")  # rank alphabetically smartrank(fruits) #> [1] 1.5 3.5 1.5 5.0 3.5 #> [1] 1.5 3.5 1.5 5.0 3.5  # rank based on frequency smartrank(fruits, sort_by = \"frequency\") #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 2 3 2 1 3 #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 2 3 2 1 3  # rank based on descending order of frequency smartrank(fruits,sort_by = \"frequency\", desc = TRUE) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 1 2 1 3 2 #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 1 2 1 3 2   ## NUMERICAL INPUT -----------------------  # rank numerically smartrank(c(1, 3, 2)) #> [1] 1 3 2 #> [1] 1 3 2  # rank numerically based on descending order smartrank(c(1, 3, 2), desc = TRUE) #> [1] 3 1 2 #> [1] 3 1 2  # always rank numerically, irrespective of sort_by smartrank(c(1, 3, 2), sort_by = \"frequency\") #> smartrank: Sorting a non-categorical variable. Ignoring `sort_by` and sorting numerically #> [1] 1 3 2 #> smartrank: Sorting a numeric variable. Ignoring `sort_by` and sorting numerically #> [1] 1 3 2"},{"path":"https://selkamand.github.io/rank/news/index.html","id":"rank-development-version","dir":"Changelog","previous_headings":"","what":"rank (development version)","title":"rank (development version)","text":"Initial CRAN submission.","code":""}]
