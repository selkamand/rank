[{"path":"https://selkamand.github.io/rank/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rank authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://selkamand.github.io/rank/articles/smartrank.html","id":"ranking-categorical-vectors","dir":"Articles","previous_headings":"","what":"Ranking categorical vectors","title":"Using smartrank","text":"","code":"fruits <- c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\")  # rank alphabetically smartrank(fruits) #> [1] 1.5 3.5 1.5 5.0 3.5  # rank based on frequency smartrank(fruits, sort_by = \"frequency\") #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 2 3 2 1 3  # rank based on descending order of frequency smartrank(fruits,sort_by = \"frequency\", desc = TRUE) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 1 2 1 3 2"},{"path":"https://selkamand.github.io/rank/articles/smartrank.html","id":"ranking-numeric-vectors","dir":"Articles","previous_headings":"","what":"Ranking numeric vectors","title":"Using smartrank","text":"","code":"# rank numerically smartrank(c(1, 3, 2)) #> [1] 1 3 2  # rank numerically based on descending order smartrank(c(1, 3, 2), desc = TRUE) #> [1] 3 1 2"},{"path":"https://selkamand.github.io/rank/articles/smartrank.html","id":"sorting-vectors-by-rank","dir":"Articles","previous_headings":"","what":"Sorting vectors by rank","title":"Using smartrank","text":"can use order sort vectors based ranks. example, can sort fruits vector based frequency element.","code":"fruits <- c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\") ranks <- smartrank(fruits, sort_by = \"frequency\") #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method fruits[order(ranks)] #> [1] \"Pear\"   \"Apple\"  \"Apple\"  \"Orange\" \"Orange\""},{"path":"https://selkamand.github.io/rank/articles/smartrank.html","id":"sorting-data-frames","dir":"Articles","previous_headings":"","what":"Sorting Data-frames","title":"Using smartrank","text":"smartrank can used arrange data.frames based one columns, maintaining complete control column contributes final row order.","code":""},{"path":"https://selkamand.github.io/rank/articles/smartrank.html","id":"baser","dir":"Articles","previous_headings":"Sorting Data-frames","what":"BaseR","title":"Using smartrank","text":"example, can sort following dataframe based frequency fruits, break ties based alphabetical order picker.","code":"data = data.frame(     fruits = c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\"),     picker = c(\"Elizabeth\", \"Damian\",  \"Bob\", \"Cameron\", \"Alice\") )  # Rank fruits so the most frequently picked fruits will come first fruit_ranks <- smartrank(data$fruits, sort_by = \"frequency\", desc=TRUE)  #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method   # Rank pickers in alphabetical order picker_ranks <- smartrank(data$picker, sort_by = \"alphabetical\", desc=FALSE)   # Sort dataframe by the fruit_ranks, then the picker_ranks (hierarchical) data[order(fruit_ranks, picker_ranks),] #>   fruits    picker #> 3  Apple       Bob #> 1  Apple Elizabeth #> 5 Orange     Alice #> 2 Orange    Damian #> 4   Pear   Cameron"},{"path":"https://selkamand.github.io/rank/articles/smartrank.html","id":"tidyverse-integration","dir":"Articles","previous_headings":"Sorting Data-frames","what":"Tidyverse Integration","title":"Using smartrank","text":"equivalent way hierarchically sort data.frames use smartrank() tidyverse arrange() function","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  arrange(   data,    smartrank(fruits, \"frequency\", desc = TRUE),    smartrank(picker, \"alphabetical\", desc = FALSE) ) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #>   fruits    picker #> 1  Apple       Bob #> 2  Apple Elizabeth #> 3 Orange     Alice #> 4 Orange    Damian #> 5   Pear   Cameron"},{"path":"https://selkamand.github.io/rank/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam El-Kamand. Author, maintainer, copyright holder.","code":""},{"path":"https://selkamand.github.io/rank/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"El-Kamand S (2024). rank: Customisable Ranking Numerical Categorical Data. R package version 0.1.0.9000, https://selkamand.github.io/rank/, https://github.com/selkamand/rank.","code":"@Manual{,   title = {rank: Customisable Ranking of Numerical and Categorical Data},   author = {Sam El-Kamand},   year = {2024},   note = {R package version 0.1.0.9000,     https://selkamand.github.io/rank/},   url = {https://github.com/selkamand/rank}, }"},{"path":"https://selkamand.github.io/rank/index.html","id":"rank","dir":"","previous_headings":"","what":"Customisable Ranking of Numerical and Categorical Data","title":"Customisable Ranking of Numerical and Categorical Data","text":"Rank provides customizable alternative built-rank() function. package offers following features: Frequency-based ranking categorical variables: choose whether rank based alphabetic order element frequency. Control sorting order: Use desc=TRUE rank based descending ascending order.","code":""},{"path":"https://selkamand.github.io/rank/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Customisable Ranking of Numerical and Categorical Data","text":"install rank CRAN run: can install development version rank like :","code":"install.packages(\"rank\") # install.packages('remotes') remotes::install_github(\"selkamand/rank\")"},{"path":[]},{"path":"https://selkamand.github.io/rank/index.html","id":"categorical-input","dir":"","previous_headings":"Usage","what":"Categorical Input","title":"Customisable Ranking of Numerical and Categorical Data","text":"","code":"library(rank)  fruits <- c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\")  ## CATEGORICAL INPUT -----------------------  # rank alphabetically smartrank(fruits) #> [1] 1.5 3.5 1.5 5.0 3.5  # rank based on frequency smartrank(fruits, sort_by = \"frequency\") #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 2 3 2 1 3  # rank based on descending order of frequency smartrank(fruits,sort_by = \"frequency\", desc = TRUE) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 1 2 1 3 2"},{"path":"https://selkamand.github.io/rank/index.html","id":"numeric-input","dir":"","previous_headings":"Usage","what":"Numeric Input","title":"Customisable Ranking of Numerical and Categorical Data","text":"","code":"# rank numerically smartrank(c(1, 3, 2)) #> [1] 1 3 2  # rank numerically based on descending order smartrank(c(1, 3, 2), desc = TRUE) #> [1] 3 1 2"},{"path":"https://selkamand.github.io/rank/index.html","id":"sorting-by-rank","dir":"","previous_headings":"Usage","what":"Sorting By Rank","title":"Customisable Ranking of Numerical and Categorical Data","text":"can use order sort vectors based ranks. example, can sort fruits vector based frequency element.","code":"fruits <- c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\") ranks <- smartrank(fruits, sort_by = \"frequency\") #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method fruits[order(ranks)] #> [1] \"Pear\"   \"Apple\"  \"Apple\"  \"Orange\" \"Orange\""},{"path":"https://selkamand.github.io/rank/index.html","id":"data-frames","dir":"","previous_headings":"Usage","what":"Data-frames","title":"Customisable Ranking of Numerical and Categorical Data","text":"smartrank can used arrange data.frames based one columns, maintaining complete control column contributes final row order.","code":""},{"path":"https://selkamand.github.io/rank/index.html","id":"baser","dir":"","previous_headings":"Usage > Data-frames","what":"BaseR","title":"Customisable Ranking of Numerical and Categorical Data","text":"example, can sort following dataframe based frequency fruits, break ties based alphabetical order picker.","code":"data = data.frame(     fruits = c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\"),     picker = c(\"Elizabeth\", \"Damian\",  \"Bob\", \"Cameron\", \"Alice\") )  # Rank fruits so the most frequently picked fruits will come first fruit_ranks <- smartrank(data$fruits, sort_by = \"frequency\", desc=TRUE)  #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method  # Rank pickers in alphabetical order picker_ranks <- smartrank(data$picker, sort_by = \"alphabetical\", desc=FALSE)   # Sort dataframe by the fruit_ranks, then the picker_ranks (hierarchical) data[order(fruit_ranks, picker_ranks),] #>   fruits    picker #> 3  Apple       Bob #> 1  Apple Elizabeth #> 5 Orange     Alice #> 2 Orange    Damian #> 4   Pear   Cameron"},{"path":"https://selkamand.github.io/rank/index.html","id":"tidyverse-integration","dir":"","previous_headings":"Usage > Data-frames","what":"Tidyverse Integration","title":"Customisable Ranking of Numerical and Categorical Data","text":"equivalent way hierarchically sort data.frames use smartrank() tidyverse arrange() function","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  arrange(   data,    smartrank(fruits, \"frequency\", desc = TRUE),    smartrank(picker, \"alphabetical\", desc = FALSE) ) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #>   fruits    picker #> 1  Apple       Bob #> 2  Apple Elizabeth #> 3 Orange     Alice #> 4 Orange    Damian #> 5   Pear   Cameron"},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank a vector based on either alphabetical or frequency order — smartrank","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"function acts drop-replacement base rank() function added option : Rank categorical factors based frequency instead alphabetically Rank descending ascending order","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"","code":"smartrank(   x,   sort_by = c(\"alphabetical\", \"frequency\"),   desc = FALSE,   ties.method = \"average\",   na.last = TRUE,   verbose = TRUE )"},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"x numeric, character, factor vector sort_by Sort ranking either \"alphabetical\" \"frequency\" . Default \"alphabetical\" desc logical indicating whether ranking descending ( TRUE ) ascending ( FALSE ) order. input numeric, ranking always based numeric order. ties.method character string specifying ties treated,     see ‘Details’; can abbreviated. na.last logical character string controlling treatment     NAs. TRUE, missing values data     put last; FALSE, put first; NA,     removed; \"keep\" kept rank NA. verbose verbose (flag)","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"ranked vector","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"x includes ‘ties’ (equal values), ties.method argument determines rank value decided. Must one : average: replaces integer ranks tied values average  (default) first: first-occurring value assumed lower rank (closer one) last: last-occurring value assumed lower rank (closer one) max min: integer ranks tied values replaced maximum minimum respectively (latter typical sports-ranking) random tied values higher / lower rank randomly decided. NA values never considered equal: na.last = TRUE na.last = FALSE given distinct ranks order occur x.","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"sort_by = \"frequency\", ties based frequency broken alphabetical order terms sort_by = \"frequency\" input character, ties.method ignored. distinct element level gets rank, rank 1 unit away next element, irrespective many duplicates","code":""},{"path":"https://selkamand.github.io/rank/reference/smartrank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank a vector based on either alphabetical or frequency order — smartrank","text":"","code":"# ------------------ ## CATEGORICAL INPUT # ------------------ fruits <- c(\"Apple\", \"Orange\", \"Apple\", \"Pear\", \"Orange\")  # rank alphabetically smartrank(fruits) #> [1] 1.5 3.5 1.5 5.0 3.5 #> [1] 1.5 3.5 1.5 5.0 3.5  # rank based on frequency smartrank(fruits, sort_by = \"frequency\") #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 2 3 2 1 3 #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 2 3 2 1 3  # rank based on descending order of frequency smartrank(fruits,sort_by = \"frequency\", desc = TRUE) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 1 2 1 3 2 #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method #> [1] 1 2 1 3 2  # Sort fruits vector based on rank ranks <- smartrank(fruits,sort_by = \"frequency\", desc = TRUE) #> smartrank: Sorting a categorical variable by frequency: ignoring ties.method fruits[order(ranks)] #> [1] \"Apple\"  \"Apple\"  \"Orange\" \"Orange\" \"Pear\"   #> [1] \"Apple\"  \"Apple\"  \"Orange\" \"Orange\" \"Pear\"  # ------------------ ## NUMERICAL INPUT # ------------------ # rank numerically smartrank(c(1, 3, 2)) #> [1] 1 3 2 #> [1] 1 3 2  # rank numerically based on descending order smartrank(c(1, 3, 2), desc = TRUE) #> [1] 3 1 2 #> [1] 3 1 2  # always rank numerically, irrespective of sort_by smartrank(c(1, 3, 2), sort_by = \"frequency\") #> smartrank: Sorting a non-categorical variable. Ignoring `sort_by` and sorting numerically #> [1] 1 3 2 #> smartrank: Sorting a numeric variable. Ignoring `sort_by` and sorting numerically #> [1] 1 3 2"},{"path":[]},{"path":"https://selkamand.github.io/rank/news/index.html","id":"rank-010","dir":"Changelog","previous_headings":"","what":"rank 0.1.0","title":"rank 0.1.0","text":"CRAN release: 2024-07-09 Initial CRAN submission.","code":""}]
